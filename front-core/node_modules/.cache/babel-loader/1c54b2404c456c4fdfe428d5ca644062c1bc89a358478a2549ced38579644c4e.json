{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mialy\\\\Documents\\\\GitHub\\\\cuisine-vital\\\\front-core\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect, useMemo } from 'react';\n// import axios from 'axios'; // On commente axios car on ne l'utilise pas pour le moment\nimport { GoogleMap, useJsApiLoader, Polyline, Marker } from '@react-google-maps/api';\nimport './App.css';\n\n// --- Importation des données simulées ---\nimport { mockLivreurs, mockRouteData } from './mock-data';\n\n// --- CONFIGURATION ---\n// const API_BASE_URL = 'http://localhost:3001'; // Plus besoin pour ce test\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '70vh'\n};\n// Centre initial de la carte (Antananarivo, Madagascar)\nconst mapCenter = {\n  lat: -18.91368,\n  lng: 47.53613\n};\n\n// --- Fonctions utilitaires (ne changent pas) ---\nconst parseCoords = localisation => {\n  if (!localisation) return null;\n  const [lng, lat] = localisation.replace('Point(', '').replace(')', '').split(' ');\n  return {\n    lat: parseFloat(lat),\n    lng: parseFloat(lng)\n  };\n};\nfunction App() {\n  _s();\n  var _routeData$livraisons, _routeData$livraisons2;\n  const [livreurs, setLivreurs] = useState([]);\n  const [selectedLivreurId, setSelectedLivreurId] = useState('');\n  const [routeData, setRouteData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // 1. Charger l'API Google Maps (ne change pas)\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: 'AIzaSyAOVYRIgupAurZup5y1PRh8Ismb1A3lLao',\n    libraries: ['geometry']\n  });\n\n  // 2. Récupérer la liste des livreurs (version SIMULÉE)\n  useEffect(() => {\n    // Remplacement de l'appel Axios par les données en dur\n    setLivreurs(mockLivreurs);\n    if (mockLivreurs.length > 0) {\n      setSelectedLivreurId(mockLivreurs[0].id);\n    }\n  }, []);\n\n  // 3. Fonction pour calculer l'itinéraire (version SIMULÉE)\n  const handleCalculateRoute = () => {\n    if (!selectedLivreurId) return;\n    setIsLoading(true);\n    setError('');\n    setRouteData(null);\n\n    // Simulation d'un délai réseau pour un effet plus réaliste\n    setTimeout(() => {\n      if (selectedLivreurId === '11111111-1111-1111-1111-111111111111') {\n        // Si c'est le bon livreur, on utilise les données simulées\n        setRouteData(mockRouteData);\n      } else {\n        // Pour les autres, on simule une erreur ou une réponse vide\n        setError('Aucun itinéraire à calculer pour ce livreur.');\n      }\n      setIsLoading(false);\n    }, 1000); // 1 seconde de délai\n  };\n\n  // 4. Décoder la polyline (ne change pas)\n  const decodedPath = useMemo(() => {\n    if (!(routeData !== null && routeData !== void 0 && routeData.geometrieItineraire) || !window.google) return [];\n    return window.google.maps.geometry.encoding.decodePath(routeData.geometrieItineraire);\n  }, [routeData]);\n\n  // Le reste du JSX pour le rendu est EXACTEMENT LE MÊME\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Calculateur d'Itin\\xE9raire Livreur (Mode Simulation)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedLivreurId,\n          onChange: e => setSelectedLivreurId(e.target.value),\n          disabled: isLoading,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- S\\xE9lectionnez un livreur --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), livreurs.map(livreur => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: livreur.id,\n            children: [livreur.prenom, \" \", livreur.nom]\n          }, livreur.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCalculateRoute,\n          disabled: isLoading || !selectedLivreurId,\n          children: isLoading ? 'Calcul en cours...' : \"Calculer l'itinéraire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        center: mapCenter,\n        zoom: 14 // Zoom un peu plus pour mieux voir Antananarivo\n        ,\n        children: [decodedPath.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n          path: decodedPath,\n          options: {\n            strokeColor: '#FF0000',\n            strokeWeight: 4\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this), routeData === null || routeData === void 0 ? void 0 : (_routeData$livraisons = routeData.livraisonsDansOrdre) === null || _routeData$livraisons === void 0 ? void 0 : _routeData$livraisons.map((livraison, index) => {\n          const position = parseCoords(livraison.localisation);\n          return position ? /*#__PURE__*/_jsxDEV(Marker, {\n            position: position,\n            label: `${index + 1}`,\n            title: `${index + 1}. ${livraison.adresse}`\n          }, livraison.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this) : null;\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Chargement de la carte...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this), routeData && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9sultats de l'itin\\xE9raire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Distance totale:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 16\n          }, this), \" \", (routeData.distanceTotaleMetres / 1000).toFixed(2), \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Dur\\xE9e estim\\xE9e:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 16\n          }, this), \" \", Math.round(routeData.dureeTotaleSecondes / 60), \" minutes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ordre des livraisons:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: (_routeData$livraisons2 = routeData.livraisonsDansOrdre) === null || _routeData$livraisons2 === void 0 ? void 0 : _routeData$livraisons2.map(l => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: l.adresse\n          }, l.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3kkzJMi9kIC1/3ZzzFLmzpsowmA=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","GoogleMap","useJsApiLoader","Polyline","Marker","mockLivreurs","mockRouteData","jsxDEV","_jsxDEV","mapContainerStyle","width","height","mapCenter","lat","lng","parseCoords","localisation","replace","split","parseFloat","App","_s","_routeData$livraisons","_routeData$livraisons2","livreurs","setLivreurs","selectedLivreurId","setSelectedLivreurId","routeData","setRouteData","isLoading","setIsLoading","error","setError","isLoaded","id","googleMapsApiKey","libraries","length","handleCalculateRoute","setTimeout","decodedPath","geometrieItineraire","window","google","maps","geometry","encoding","decodePath","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","disabled","map","livreur","prenom","nom","onClick","center","zoom","path","options","strokeColor","strokeWeight","livraisonsDansOrdre","livraison","index","position","label","title","adresse","distanceTotaleMetres","toFixed","Math","round","dureeTotaleSecondes","l","_c","$RefreshReg$"],"sources":["C:/Users/Mialy/Documents/GitHub/cuisine-vital/front-core/src/App.js"],"sourcesContent":["// src/App.js\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\n// import axios from 'axios'; // On commente axios car on ne l'utilise pas pour le moment\r\nimport { GoogleMap, useJsApiLoader, Polyline, Marker } from '@react-google-maps/api';\r\nimport './App.css';\r\n\r\n// --- Importation des données simulées ---\r\nimport { mockLivreurs, mockRouteData } from './mock-data';\r\n\r\n// --- CONFIGURATION ---\r\n// const API_BASE_URL = 'http://localhost:3001'; // Plus besoin pour ce test\r\n\r\nconst mapContainerStyle = {\r\n  width: '100vw',\r\n  height: '70vh',\r\n};\r\n// Centre initial de la carte (Antananarivo, Madagascar)\r\nconst mapCenter = {\r\n  lat: -18.91368,\r\n  lng: 47.53613,\r\n};\r\n\r\n// --- Fonctions utilitaires (ne changent pas) ---\r\nconst parseCoords = (localisation) => {\r\n  if (!localisation) return null;\r\n  const [lng, lat] = localisation.replace('Point(', '').replace(')', '').split(' ');\r\n  return { lat: parseFloat(lat), lng: parseFloat(lng) };\r\n};\r\n\r\nfunction App() {\r\n  const [livreurs, setLivreurs] = useState([]);\r\n  const [selectedLivreurId, setSelectedLivreurId] = useState('');\r\n  const [routeData, setRouteData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // 1. Charger l'API Google Maps (ne change pas)\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: 'AIzaSyAOVYRIgupAurZup5y1PRh8Ismb1A3lLao',\r\n    libraries: ['geometry'],\r\n  });\r\n\r\n  // 2. Récupérer la liste des livreurs (version SIMULÉE)\r\n  useEffect(() => {\r\n    // Remplacement de l'appel Axios par les données en dur\r\n    setLivreurs(mockLivreurs);\r\n    if (mockLivreurs.length > 0) {\r\n      setSelectedLivreurId(mockLivreurs[0].id);\r\n    }\r\n  }, []);\r\n\r\n  // 3. Fonction pour calculer l'itinéraire (version SIMULÉE)\r\n  const handleCalculateRoute = () => {\r\n    if (!selectedLivreurId) return;\r\n\r\n    setIsLoading(true);\r\n    setError('');\r\n    setRouteData(null);\r\n\r\n    // Simulation d'un délai réseau pour un effet plus réaliste\r\n    setTimeout(() => {\r\n      if (selectedLivreurId === '11111111-1111-1111-1111-111111111111') {\r\n        // Si c'est le bon livreur, on utilise les données simulées\r\n        setRouteData(mockRouteData);\r\n      } else {\r\n        // Pour les autres, on simule une erreur ou une réponse vide\r\n        setError('Aucun itinéraire à calculer pour ce livreur.');\r\n      }\r\n      setIsLoading(false);\r\n    }, 1000); // 1 seconde de délai\r\n  };\r\n\r\n  // 4. Décoder la polyline (ne change pas)\r\n  const decodedPath = useMemo(() => {\r\n    if (!routeData?.geometrieItineraire || !window.google) return [];\r\n    return window.google.maps.geometry.encoding.decodePath(routeData.geometrieItineraire);\r\n  }, [routeData]);\r\n  \r\n  // Le reste du JSX pour le rendu est EXACTEMENT LE MÊME\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Calculateur d'Itinéraire Livreur (Mode Simulation)</h1>\r\n        <div className=\"controls\">\r\n          <select \r\n            value={selectedLivreurId} \r\n            onChange={(e) => setSelectedLivreurId(e.target.value)}\r\n            disabled={isLoading}\r\n          >\r\n            <option value=\"\">-- Sélectionnez un livreur --</option>\r\n            {livreurs.map(livreur => (\r\n              <option key={livreur.id} value={livreur.id}>\r\n                {livreur.prenom} {livreur.nom}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <button onClick={handleCalculateRoute} disabled={isLoading || !selectedLivreurId}>\r\n            {isLoading ? 'Calcul en cours...' : \"Calculer l'itinéraire\"}\r\n          </button>\r\n        </div>\r\n        {error && <p className=\"error\">{error}</p>}\r\n      </header>\r\n\r\n      <main>\r\n        {isLoaded ? (\r\n          <GoogleMap\r\n            mapContainerStyle={mapContainerStyle}\r\n            center={mapCenter}\r\n            zoom={14} // Zoom un peu plus pour mieux voir Antananarivo\r\n          >\r\n            {decodedPath.length > 0 && (\r\n              <Polyline\r\n                path={decodedPath}\r\n                options={{ strokeColor: '#FF0000', strokeWeight: 4 }}\r\n              />\r\n            )}\r\n            {routeData?.livraisonsDansOrdre?.map((livraison, index) => {\r\n              const position = parseCoords(livraison.localisation);\r\n              return position ? (\r\n                <Marker\r\n                  key={livraison.id}\r\n                  position={position}\r\n                  label={`${index + 1}`}\r\n                  title={`${index + 1}. ${livraison.adresse}`}\r\n                />\r\n              ) : null;\r\n            })}\r\n          </GoogleMap>\r\n        ) : <div>Chargement de la carte...</div>}\r\n        {routeData && !error && (\r\n          <div className=\"results\">\r\n            <h2>Résultats de l'itinéraire</h2>\r\n            <p><strong>Distance totale:</strong> {(routeData.distanceTotaleMetres / 1000).toFixed(2)} km</p>\r\n            <p><strong>Durée estimée:</strong> {Math.round(routeData.dureeTotaleSecondes / 60)} minutes</p>\r\n            <h3>Ordre des livraisons:</h3>\r\n            <ol>\r\n              {routeData.livraisonsDansOrdre?.map(l => (\r\n                <li key={l.id}>{l.adresse}</li>\r\n              ))}\r\n            </ol>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}