{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mialy\\\\Documents\\\\GitHub\\\\cuisine-vital\\\\front-core\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { GoogleMap, useJsApiLoader, Polyline, Marker } from '@react-google-maps/api';\nimport './App.css';\n\n// --- Données simulées directement dans le fichier pour plus de simplicité ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockLivreurs = [{\n  id: \"11111111-1111-1111-1111-111111111111\",\n  nom: \"Rabe\",\n  prenom: \"Koto\"\n}, {\n  id: \"22222222-2222-2222-2222-222222222222\",\n  nom: \"Rakoto\",\n  prenom: \"Fara\"\n}];\nconst mockRouteData = {\n  livraisonsDansOrdre: [{\n    id: \"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\",\n    adresse: \"Palais de la Reine (Rova)\",\n    statut: \"ASSIGNEE\",\n    localisation: \"Point(47.5323 -18.9227)\"\n  }, {\n    id: \"dddddddd-dddd-dddd-dddd-dddddddddddd\",\n    adresse: \"Gare de Soarano\",\n    statut: \"ASSIGNEE\",\n    localisation: \"Point(47.5222 -18.9038)\"\n  }, {\n    id: \"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb\",\n    adresse: \"Marché d'Analakely\",\n    statut: \"ASSIGNEE\",\n    localisation: \"Point(47.5255 -18.9069)\"\n  }, {\n    id: \"cccccccc-cccc-cccc-cccc-cccccccccccc\",\n    adresse: \"Lac Anosy\",\n    statut: \"ASSIGNEE\",\n    localisation: \"Point(47.5186 -18.9171)\"\n  }],\n  distanceTotaleMetres: 6133,\n  dureeTotaleSecondes: 1245,\n  // Polyline encodée simplifiée pour un itinéraire réaliste à Antananarivo\n  geometrieItineraire: \"rvezAmm|`B@KAGCIEGGGOKk@_@OIGEEEEEEIMMUUUSSOOOKGIGEECCCCAAAAAA?A?A?A?A?C?C?C?C?C?CACACAEAGAGAIAIAIAGAGAGAEAEACACA?A?A?A?A?A?A?A?A?A?A?A?A?\"\n};\n\n// Fonction pour décoder manuellement une polyline (algorithme Google)\nconst decodePolyline = str => {\n  let index = 0;\n  const len = str.length;\n  let lat = 0;\n  let lng = 0;\n  const coordinates = [];\n  while (index < len) {\n    let b;\n    let shift = 0;\n    let result = 0;\n    do {\n      b = str.charCodeAt(index++) - 63;\n      result |= (b & 0x1f) << shift;\n      shift += 5;\n    } while (b >= 0x20);\n    const deltaLat = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n    lat += deltaLat;\n    shift = 0;\n    result = 0;\n    do {\n      b = str.charCodeAt(index++) - 63;\n      result |= (b & 0x1f) << shift;\n      shift += 5;\n    } while (b >= 0x20);\n    const deltaLng = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n    lng += deltaLng;\n    coordinates.push({\n      lat: lat / 1e5,\n      lng: lng / 1e5\n    });\n  }\n  return coordinates;\n};\n\n// --- CONFIGURATION DE LA CARTE ---\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '70vh'\n};\nconst initialCenter = {\n  lat: -18.91368,\n  lng: 47.53613\n}; // Antananarivo\n\n// --- FONCTION UTILITAIRE ---\nconst parseCoords = localisation => {\n  if (!localisation) return null;\n  const match = localisation.match(/Point\\(([+-]?\\d*\\.?\\d+)\\s+([+-]?\\d*\\.?\\d+)\\)/);\n  if (!match) return null;\n  return {\n    lat: parseFloat(match[2]),\n    lng: parseFloat(match[1])\n  };\n};\n\n// Créer un itinéraire simple entre les points de livraison\nconst createSimpleRoute = deliveries => {\n  const coordinates = [];\n  for (let i = 0; i < deliveries.length - 1; i++) {\n    const start = parseCoords(deliveries[i].localisation);\n    const end = parseCoords(deliveries[i + 1].localisation);\n    if (start && end) {\n      // Ajouter le point de départ\n      coordinates.push(start);\n\n      // Créer quelques points intermédiaires pour un tracé plus naturel\n      const steps = 5;\n      for (let j = 1; j < steps; j++) {\n        const ratio = j / steps;\n        const intermediateLat = start.lat + (end.lat - start.lat) * ratio;\n        const intermediateLng = start.lng + (end.lng - start.lng) * ratio;\n        coordinates.push({\n          lat: intermediateLat,\n          lng: intermediateLng\n        });\n      }\n    }\n  }\n\n  // Ajouter le dernier point\n  const lastDelivery = deliveries[deliveries.length - 1];\n  const lastCoord = parseCoords(lastDelivery.localisation);\n  if (lastCoord) {\n    coordinates.push(lastCoord);\n  }\n  return coordinates;\n};\nfunction App() {\n  _s();\n  var _routeData$livraisons, _routeData$livraisons2;\n  const [map, setMap] = useState(null);\n  const [livreurs, setLivreurs] = useState([]);\n  const [selectedLivreurId, setSelectedLivreurId] = useState('');\n  const [routeData, setRouteData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // 1. Charger l'API Google Maps avec la bibliothèque 'geometry'\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: 'AIzaSyAOVYRIgupAurZup5y1PRh8Ismb1A3lLao',\n    libraries: ['geometry']\n  });\n\n  // 2. Charger les livreurs simulés au démarrage\n  useEffect(() => {\n    setLivreurs(mockLivreurs);\n    if (mockLivreurs.length > 0) {\n      setSelectedLivreurId(mockLivreurs[0].id);\n    }\n  }, []);\n\n  // 3. Simuler le calcul d'itinéraire au clic\n  const handleCalculateRoute = () => {\n    if (!selectedLivreurId) return;\n    setIsLoading(true);\n    setError('');\n    setRouteData(null);\n\n    // Simulation d'un délai réseau pour un effet réaliste\n    setTimeout(() => {\n      if (selectedLivreurId === '11111111-1111-1111-1111-111111111111') {\n        setRouteData(mockRouteData);\n      } else {\n        setError('Aucun itinéraire à calculer pour ce livreur.');\n      }\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  // 4. Décoder la polyline ou créer un itinéraire simple\n  const routePath = useMemo(() => {\n    if (!(routeData !== null && routeData !== void 0 && routeData.livraisonsDansOrdre)) return [];\n\n    // Essayer d'abord de décoder la polyline\n    if (routeData.geometrieItineraire) {\n      try {\n        var _window$google, _window$google$maps, _window$google$maps$g;\n        // Utiliser le décodeur Google Maps si disponible\n        if (isLoaded && (_window$google = window.google) !== null && _window$google !== void 0 && (_window$google$maps = _window$google.maps) !== null && _window$google$maps !== void 0 && (_window$google$maps$g = _window$google$maps.geometry) !== null && _window$google$maps$g !== void 0 && _window$google$maps$g.encoding) {\n          return window.google.maps.geometry.encoding.decodePath(routeData.geometrieItineraire);\n        } else {\n          // Utiliser notre décodeur personnalisé\n          return decodePolyline(routeData.geometrieItineraire);\n        }\n      } catch (e) {\n        console.warn(\"Impossible de décoder la polyline, création d'un itinéraire simple:\", e);\n      }\n    }\n\n    // Si le décodage échoue, créer un itinéraire simple\n    return createSimpleRoute(routeData.livraisonsDansOrdre);\n  }, [routeData, isLoaded]);\n\n  // 5. Fonctions pour gérer l'instance de la carte\n  const onLoad = useCallback(function callback(mapInstance) {\n    setMap(mapInstance);\n  }, []);\n  const onUnmount = useCallback(function callback(mapInstance) {\n    setMap(null);\n  }, []);\n\n  // 6. Effet pour zoomer automatiquement sur l'itinéraire\n  useEffect(() => {\n    if (map && routePath.length > 0) {\n      const bounds = new window.google.maps.LatLngBounds();\n      routePath.forEach(point => {\n        bounds.extend(point);\n      });\n      // Ajouter aussi les points de livraison aux limites\n      if (routeData !== null && routeData !== void 0 && routeData.livraisonsDansOrdre) {\n        routeData.livraisonsDansOrdre.forEach(livraison => {\n          const coords = parseCoords(livraison.localisation);\n          if (coords) {\n            bounds.extend(coords);\n          }\n        });\n      }\n      map.fitBounds(bounds);\n    }\n  }, [map, routePath, routeData]);\n\n  // 7. Rendu du composant\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Calculateur d'Itin\\xE9raire Livreur (Mode Simulation)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedLivreurId,\n          onChange: e => setSelectedLivreurId(e.target.value),\n          disabled: isLoading,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- S\\xE9lectionnez un livreur --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), livreurs.map(livreur => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: livreur.id,\n            children: [livreur.prenom, \" \", livreur.nom]\n          }, livreur.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCalculateRoute,\n          disabled: isLoading || !selectedLivreurId,\n          children: isLoading ? 'Calcul en cours...' : \"Calculer l'itinéraire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        center: initialCenter,\n        zoom: 14,\n        onLoad: onLoad,\n        onUnmount: onUnmount,\n        children: [routePath.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n          path: routePath,\n          options: {\n            strokeColor: '#FF0000',\n            strokeOpacity: 0.8,\n            strokeWeight: 4,\n            zIndex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }, this), routeData === null || routeData === void 0 ? void 0 : (_routeData$livraisons = routeData.livraisonsDansOrdre) === null || _routeData$livraisons === void 0 ? void 0 : _routeData$livraisons.map((livraison, index) => {\n          const position = parseCoords(livraison.localisation);\n          return position ? /*#__PURE__*/_jsxDEV(Marker, {\n            position: position,\n            label: {\n              text: `${index + 1}`,\n              color: 'white',\n              fontWeight: 'bold'\n            },\n            title: `${index + 1}. ${livraison.adresse}`,\n            icon: {\n              url: `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(`\n                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <circle cx=\"16\" cy=\"16\" r=\"14\" fill=\"#4285F4\" stroke=\"white\" stroke-width=\"2\"/>\n                        <text x=\"16\" y=\"20\" text-anchor=\"middle\" fill=\"white\" font-size=\"12\" font-weight=\"bold\">${index + 1}</text>\n                      </svg>\n                    `)}`,\n              scaledSize: new window.google.maps.Size(32, 32),\n              anchor: new window.google.maps.Point(16, 16)\n            }\n          }, livraison.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 17\n          }, this) : null;\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Chargement de la carte...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), routeData && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"R\\xE9sultats de l'itin\\xE9raire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Distance totale:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 16\n          }, this), \" \", (routeData.distanceTotaleMetres / 1000).toFixed(2), \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Dur\\xE9e estim\\xE9e:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 16\n          }, this), \" \", Math.round(routeData.dureeTotaleSecondes / 60), \" minutes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Nombre de points sur l'itin\\xE9raire:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 16\n          }, this), \" \", routePath.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ordre des livraisons:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: (_routeData$livraisons2 = routeData.livraisonsDansOrdre) === null || _routeData$livraisons2 === void 0 ? void 0 : _routeData$livraisons2.map((l, index) => {\n            const coords = parseCoords(l.localisation);\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: l.adresse\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 21\n              }, this), coords && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: '#666',\n                  fontSize: '0.9em'\n                },\n                children: [' ', \"(lat: \", coords.lat.toFixed(4), \", lng: \", coords.lng.toFixed(4), \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 23\n              }, this)]\n            }, l.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"x6Ap4KtrrqwkwzDxTcxkIB5EtGI=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","GoogleMap","useJsApiLoader","Polyline","Marker","jsxDEV","_jsxDEV","mockLivreurs","id","nom","prenom","mockRouteData","livraisonsDansOrdre","adresse","statut","localisation","distanceTotaleMetres","dureeTotaleSecondes","geometrieItineraire","decodePolyline","str","index","len","length","lat","lng","coordinates","b","shift","result","charCodeAt","deltaLat","deltaLng","push","mapContainerStyle","width","height","initialCenter","parseCoords","match","parseFloat","createSimpleRoute","deliveries","i","start","end","steps","j","ratio","intermediateLat","intermediateLng","lastDelivery","lastCoord","App","_s","_routeData$livraisons","_routeData$livraisons2","map","setMap","livreurs","setLivreurs","selectedLivreurId","setSelectedLivreurId","routeData","setRouteData","isLoading","setIsLoading","error","setError","isLoaded","googleMapsApiKey","libraries","handleCalculateRoute","setTimeout","routePath","_window$google","_window$google$maps","_window$google$maps$g","window","google","maps","geometry","encoding","decodePath","e","console","warn","onLoad","callback","mapInstance","onUnmount","bounds","LatLngBounds","forEach","point","extend","livraison","coords","fitBounds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","disabled","livreur","onClick","center","zoom","path","options","strokeColor","strokeOpacity","strokeWeight","zIndex","position","label","text","color","fontWeight","title","icon","url","encodeURIComponent","scaledSize","Size","anchor","Point","toFixed","Math","round","l","style","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Mialy/Documents/GitHub/cuisine-vital/front-core/src/App.js"],"sourcesContent":["// src/App.js\r\n\r\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { GoogleMap, useJsApiLoader, Polyline, Marker } from '@react-google-maps/api';\r\nimport './App.css';\r\n\r\n// --- Données simulées directement dans le fichier pour plus de simplicité ---\r\nconst mockLivreurs = [\r\n  { id: \"11111111-1111-1111-1111-111111111111\", nom: \"Rabe\", prenom: \"Koto\" },\r\n  { id: \"22222222-2222-2222-2222-222222222222\", nom: \"Rakoto\", prenom: \"Fara\" },\r\n];\r\n\r\nconst mockRouteData = {\r\n  livraisonsDansOrdre: [\r\n    { id: \"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\", adresse: \"Palais de la Reine (Rova)\", statut: \"ASSIGNEE\", localisation: \"Point(47.5323 -18.9227)\" },\r\n    { id: \"dddddddd-dddd-dddd-dddd-dddddddddddd\", adresse: \"Gare de Soarano\", statut: \"ASSIGNEE\", localisation: \"Point(47.5222 -18.9038)\" },\r\n    { id: \"bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb\", adresse: \"Marché d'Analakely\", statut: \"ASSIGNEE\", localisation: \"Point(47.5255 -18.9069)\" },\r\n    { id: \"cccccccc-cccc-cccc-cccc-cccccccccccc\", adresse: \"Lac Anosy\", statut: \"ASSIGNEE\", localisation: \"Point(47.5186 -18.9171)\" },\r\n  ],\r\n  distanceTotaleMetres: 6133,\r\n  dureeTotaleSecondes: 1245,\r\n  // Polyline encodée simplifiée pour un itinéraire réaliste à Antananarivo\r\n  geometrieItineraire: \"rvezAmm|`B@KAGCIEGGGOKk@_@OIGEEEEEEIMMUUUSSOOOKGIGEECCCCAAAAAA?A?A?A?A?C?C?C?C?C?CACACAEAGAGAIAIAIAGAGAGAEAEACACA?A?A?A?A?A?A?A?A?A?A?A?A?\",\r\n};\r\n\r\n// Fonction pour décoder manuellement une polyline (algorithme Google)\r\nconst decodePolyline = (str) => {\r\n  let index = 0;\r\n  const len = str.length;\r\n  let lat = 0;\r\n  let lng = 0;\r\n  const coordinates = [];\r\n\r\n  while (index < len) {\r\n    let b;\r\n    let shift = 0;\r\n    let result = 0;\r\n    do {\r\n      b = str.charCodeAt(index++) - 63;\r\n      result |= (b & 0x1f) << shift;\r\n      shift += 5;\r\n    } while (b >= 0x20);\r\n    const deltaLat = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));\r\n    lat += deltaLat;\r\n\r\n    shift = 0;\r\n    result = 0;\r\n    do {\r\n      b = str.charCodeAt(index++) - 63;\r\n      result |= (b & 0x1f) << shift;\r\n      shift += 5;\r\n    } while (b >= 0x20);\r\n    const deltaLng = ((result & 1) !== 0 ? ~(result >> 1) : (result >> 1));\r\n    lng += deltaLng;\r\n\r\n    coordinates.push({\r\n      lat: lat / 1e5,\r\n      lng: lng / 1e5\r\n    });\r\n  }\r\n\r\n  return coordinates;\r\n};\r\n\r\n// --- CONFIGURATION DE LA CARTE ---\r\nconst mapContainerStyle = { width: '100vw', height: '70vh' };\r\nconst initialCenter = { lat: -18.91368, lng: 47.53613 }; // Antananarivo\r\n\r\n// --- FONCTION UTILITAIRE ---\r\nconst parseCoords = (localisation) => {\r\n  if (!localisation) return null;\r\n  const match = localisation.match(/Point\\(([+-]?\\d*\\.?\\d+)\\s+([+-]?\\d*\\.?\\d+)\\)/);\r\n  if (!match) return null;\r\n  return { \r\n    lat: parseFloat(match[2]), \r\n    lng: parseFloat(match[1]) \r\n  };\r\n};\r\n\r\n// Créer un itinéraire simple entre les points de livraison\r\nconst createSimpleRoute = (deliveries) => {\r\n  const coordinates = [];\r\n  \r\n  for (let i = 0; i < deliveries.length - 1; i++) {\r\n    const start = parseCoords(deliveries[i].localisation);\r\n    const end = parseCoords(deliveries[i + 1].localisation);\r\n    \r\n    if (start && end) {\r\n      // Ajouter le point de départ\r\n      coordinates.push(start);\r\n      \r\n      // Créer quelques points intermédiaires pour un tracé plus naturel\r\n      const steps = 5;\r\n      for (let j = 1; j < steps; j++) {\r\n        const ratio = j / steps;\r\n        const intermediateLat = start.lat + (end.lat - start.lat) * ratio;\r\n        const intermediateLng = start.lng + (end.lng - start.lng) * ratio;\r\n        coordinates.push({\r\n          lat: intermediateLat,\r\n          lng: intermediateLng\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Ajouter le dernier point\r\n  const lastDelivery = deliveries[deliveries.length - 1];\r\n  const lastCoord = parseCoords(lastDelivery.localisation);\r\n  if (lastCoord) {\r\n    coordinates.push(lastCoord);\r\n  }\r\n  \r\n  return coordinates;\r\n};\r\n\r\nfunction App() {\r\n  const [map, setMap] = useState(null);\r\n  const [livreurs, setLivreurs] = useState([]);\r\n  const [selectedLivreurId, setSelectedLivreurId] = useState('');\r\n  const [routeData, setRouteData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // 1. Charger l'API Google Maps avec la bibliothèque 'geometry'\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: 'AIzaSyAOVYRIgupAurZup5y1PRh8Ismb1A3lLao',\r\n    libraries: ['geometry'],\r\n  });\r\n\r\n  // 2. Charger les livreurs simulés au démarrage\r\n  useEffect(() => {\r\n    setLivreurs(mockLivreurs);\r\n    if (mockLivreurs.length > 0) {\r\n      setSelectedLivreurId(mockLivreurs[0].id);\r\n    }\r\n  }, []);\r\n\r\n  // 3. Simuler le calcul d'itinéraire au clic\r\n  const handleCalculateRoute = () => {\r\n    if (!selectedLivreurId) return;\r\n    setIsLoading(true);\r\n    setError('');\r\n    setRouteData(null);\r\n\r\n    // Simulation d'un délai réseau pour un effet réaliste\r\n    setTimeout(() => {\r\n      if (selectedLivreurId === '11111111-1111-1111-1111-111111111111') {\r\n        setRouteData(mockRouteData);\r\n      } else {\r\n        setError('Aucun itinéraire à calculer pour ce livreur.');\r\n      }\r\n      setIsLoading(false);\r\n    }, 1000);\r\n  };\r\n\r\n  // 4. Décoder la polyline ou créer un itinéraire simple\r\n  const routePath = useMemo(() => {\r\n    if (!routeData?.livraisonsDansOrdre) return [];\r\n    \r\n    // Essayer d'abord de décoder la polyline\r\n    if (routeData.geometrieItineraire) {\r\n      try {\r\n        // Utiliser le décodeur Google Maps si disponible\r\n        if (isLoaded && window.google?.maps?.geometry?.encoding) {\r\n          return window.google.maps.geometry.encoding.decodePath(routeData.geometrieItineraire);\r\n        } else {\r\n          // Utiliser notre décodeur personnalisé\r\n          return decodePolyline(routeData.geometrieItineraire);\r\n        }\r\n      } catch (e) {\r\n        console.warn(\"Impossible de décoder la polyline, création d'un itinéraire simple:\", e);\r\n      }\r\n    }\r\n    \r\n    // Si le décodage échoue, créer un itinéraire simple\r\n    return createSimpleRoute(routeData.livraisonsDansOrdre);\r\n  }, [routeData, isLoaded]);\r\n\r\n  // 5. Fonctions pour gérer l'instance de la carte\r\n  const onLoad = useCallback(function callback(mapInstance) {\r\n    setMap(mapInstance);\r\n  }, []);\r\n\r\n  const onUnmount = useCallback(function callback(mapInstance) {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  // 6. Effet pour zoomer automatiquement sur l'itinéraire\r\n  useEffect(() => {\r\n    if (map && routePath.length > 0) {\r\n      const bounds = new window.google.maps.LatLngBounds();\r\n      routePath.forEach(point => {\r\n        bounds.extend(point);\r\n      });\r\n      // Ajouter aussi les points de livraison aux limites\r\n      if (routeData?.livraisonsDansOrdre) {\r\n        routeData.livraisonsDansOrdre.forEach(livraison => {\r\n          const coords = parseCoords(livraison.localisation);\r\n          if (coords) {\r\n            bounds.extend(coords);\r\n          }\r\n        });\r\n      }\r\n      map.fitBounds(bounds);\r\n    }\r\n  }, [map, routePath, routeData]);\r\n\r\n  // 7. Rendu du composant\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Calculateur d'Itinéraire Livreur (Mode Simulation)</h1>\r\n        <div className=\"controls\">\r\n          <select \r\n            value={selectedLivreurId} \r\n            onChange={(e) => setSelectedLivreurId(e.target.value)}\r\n            disabled={isLoading}\r\n          >\r\n            <option value=\"\">-- Sélectionnez un livreur --</option>\r\n            {livreurs.map(livreur => (\r\n              <option key={livreur.id} value={livreur.id}>\r\n                {livreur.prenom} {livreur.nom}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <button onClick={handleCalculateRoute} disabled={isLoading || !selectedLivreurId}>\r\n            {isLoading ? 'Calcul en cours...' : \"Calculer l'itinéraire\"}\r\n          </button>\r\n        </div>\r\n        {error && <p className=\"error\">{error}</p>}\r\n      </header>\r\n\r\n      <main>\r\n        {isLoaded ? (\r\n          <GoogleMap\r\n            mapContainerStyle={mapContainerStyle}\r\n            center={initialCenter}\r\n            zoom={14}\r\n            onLoad={onLoad}\r\n            onUnmount={onUnmount}\r\n          >\r\n            {/* Affiche l'itinéraire si disponible */}\r\n            {routePath.length > 0 && (\r\n              <Polyline\r\n                path={routePath}\r\n                options={{\r\n                  strokeColor: '#FF0000',\r\n                  strokeOpacity: 0.8,\r\n                  strokeWeight: 4,\r\n                  zIndex: 1,\r\n                }}\r\n              />\r\n            )}\r\n            \r\n            {/* Affiche les marqueurs des points de livraison */}\r\n            {routeData?.livraisonsDansOrdre?.map((livraison, index) => {\r\n              const position = parseCoords(livraison.localisation);\r\n              return position ? (\r\n                <Marker\r\n                  key={livraison.id}\r\n                  position={position}\r\n                  label={{\r\n                    text: `${index + 1}`,\r\n                    color: 'white',\r\n                    fontWeight: 'bold',\r\n                  }}\r\n                  title={`${index + 1}. ${livraison.adresse}`}\r\n                  icon={{\r\n                    url: `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(`\r\n                      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <circle cx=\"16\" cy=\"16\" r=\"14\" fill=\"#4285F4\" stroke=\"white\" stroke-width=\"2\"/>\r\n                        <text x=\"16\" y=\"20\" text-anchor=\"middle\" fill=\"white\" font-size=\"12\" font-weight=\"bold\">${index + 1}</text>\r\n                      </svg>\r\n                    `)}`,\r\n                    scaledSize: new window.google.maps.Size(32, 32),\r\n                    anchor: new window.google.maps.Point(16, 16),\r\n                  }}\r\n                />\r\n              ) : null;\r\n            })}\r\n          </GoogleMap>\r\n        ) : (\r\n          <div>Chargement de la carte...</div>\r\n        )}\r\n        \r\n        {/* Affiche les résultats textuels si disponibles */}\r\n        {routeData && !error && (\r\n          <div className=\"results\">\r\n            <h2>Résultats de l'itinéraire</h2>\r\n            <p><strong>Distance totale:</strong> {(routeData.distanceTotaleMetres / 1000).toFixed(2)} km</p>\r\n            <p><strong>Durée estimée:</strong> {Math.round(routeData.dureeTotaleSecondes / 60)} minutes</p>\r\n            <p><strong>Nombre de points sur l'itinéraire:</strong> {routePath.length}</p>\r\n            <h3>Ordre des livraisons:</h3>\r\n            <ol>\r\n              {routeData.livraisonsDansOrdre?.map((l, index) => {\r\n                const coords = parseCoords(l.localisation);\r\n                return (\r\n                  <li key={l.id}>\r\n                    <strong>{l.adresse}</strong>\r\n                    {coords && (\r\n                      <span style={{color: '#666', fontSize: '0.9em'}}>\r\n                        {' '}(lat: {coords.lat.toFixed(4)}, lng: {coords.lng.toFixed(4)})\r\n                      </span>\r\n                    )}\r\n                  </li>\r\n                );\r\n              })}\r\n            </ol>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}